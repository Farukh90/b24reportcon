from datetime import datetime, timedelta

import requests

from constants import TASK_DETAIL_URL

# –ì—Ä—É–ø–ø—ã —Å –∏—Ö ID
groups = {
    138: "–í–Ω–µ—Å–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∏–∑–¥–µ–ª–∏–µ",
    128: "–ó–ê–ú–ï–†–´",
    82: "–ó–∞—è–≤–∫–∏ –Ω–∞ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç",
}


def get_previous_month_date_range():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è API.
    """
    today = datetime.now()
    # –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    last_day_previous_month = today.replace(day=1) - timedelta(days=1)
    # –ü–µ—Ä–≤—ã–π –¥–µ–Ω—å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    first_day_previous_month = last_day_previous_month.replace(day=1)

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç API (—Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–¥–≤–∏–≥–∞ +3 —á–∞—Å–∞)
    start_date_api = first_day_previous_month.strftime("%Y-%m-%dT00:00:00")
    end_date_api = last_day_previous_month.strftime("%Y-%m-%dT23:59:59")

    return start_date_api, end_date_api


def fetch_task_statistics_report(start_date_api, end_date_api):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.
    """
    report_data = {group_name: {} for group_name in groups.values()}

    for group_id, group_name in groups.items():
        params = {
            "order": {"ID": "ASC"},  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ ID
            "filter": {
                "GROUP_ID": group_id,  # –§–∏–ª—å—Ç—Ä –ø–æ –≥—Ä—É–ø–ø–µ
                ">=CLOSED_DATE": start_date_api,  # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ start_date
                "<=CLOSED_DATE": end_date_api,  # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–æ end_date
                "STATUS": "5",  # –¢–æ–ª—å–∫–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            },
            "select": ["responsibleId", "responsible"],  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        }

        try:
            response = requests.post(TASK_DETAIL_URL, json=params)
            response.raise_for_status()
            data = response.json()
        except requests.exceptions.RequestException as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≥—Ä—É–ø–ø—ã {group_name}: {e}")
            continue
        except ValueError:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name}")
            continue

        tasks = data.get("result", {}).get("tasks", [])
        if tasks:
            for task in tasks:
                responsible = task.get("responsible", {})
                responsible_name = responsible.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")

                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ
                if responsible_name not in report_data[group_name]:
                    report_data[group_name][responsible_name] = 0

                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
                report_data[group_name][responsible_name] += 1

    return report_data


def generate_statistics_report(results):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.
    """
    from datetime import datetime

    report_month = (datetime.now().replace(day=1) - timedelta(days=1)).strftime("%m.%Y")
    report_str = f"–û—Ç—á–µ—Ç –∑–∞ {report_month}\n"

    for group_name, responsible_stats in results.items():
        report_str += f"\n–ì—Ä—É–ø–ø–∞: {group_name}\n"
        if not responsible_stats:
            report_str += "  –ù–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.\n"
            continue
        for responsible_name, count in responsible_stats.items():
            report_str += f"  –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {responsible_name}\n"
            report_str += f"    –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏: {count}\n"
    return report_str


def generate_html_report(results):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –≤ HTML-—Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è Telegram —Å —Ä–æ–≤–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
    """
    from datetime import datetime

    report_month = (datetime.now().replace(day=1) - timedelta(days=1)).strftime("%m.%Y")
    report_str = f"<b>–û—Ç—á–µ—Ç –∑–∞ {report_month}</b>\n\n"

    for group_name, responsible_stats in results.items():
        report_str += f"üü¢ <b>{group_name}</b>\n"
        if not responsible_stats:
            report_str += "  –ù–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.\n\n"
            continue

        report_str += "<pre>\n"
        report_str += f"{'–ò.–§':<22} | {'–ó–∞–∫—Ä—ã—Ç–æ'}\n"
        report_str += f"{'-' * 22}-|{'-' * 7}\n"

        # üîπ –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ —É–±—ã–≤–∞–Ω–∏—é –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–∫—Ä—ã—Ç—ã—Ö –∑–∞–¥–∞—á
        sorted_responsibles = sorted(responsible_stats.items(), key=lambda x: x[1], reverse=True)

        for responsible_name, count in sorted_responsibles:
            report_str += f"{responsible_name:<22} | {count}\n"

        report_str += "</pre>\n"  # –ó–∞–∫—Ä—ã–≤–∞–µ–º <pre>

    return report_str


def main():
    start_date_api, end_date_api = get_previous_month_date_range()
    # results = fetch_task_statistics(start_date_api, end_date_api)
    # print_statistics(results)
    results = fetch_task_statistics_report(start_date_api, end_date_api)
    print(generate_statistics_report(results))


if __name__ == "__main__":
    main()
